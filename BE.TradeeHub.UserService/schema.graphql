schema {
  query: Query
  mutation: Mutation
}

type AccountConfirmationResponse {
  confirmSignUpResponse: ConfirmSignUpResponse
  isConfirmationSuccess: Boolean!
  message: String
}

type CodeDeliveryDetailsType {
  attributeName: String
  deliveryMedium: DeliveryMediumType
  destination: String
}

type ConfirmSignUpResponse {
  responseMetadata: ResponseMetadata
  contentLength: Long!
  httpStatusCode: HttpStatusCode!
}

type DeliveryMediumType {
  value: String
}

type GeneralCompanyInfoDbObject {
  marketingPreference: String!
  annualRevenue: String!
  companyPriority: String!
  companySize: String!
}

type KeyValuePairOfStringAndString {
  key: String!
  value: String!
}

type LoginResponse {
  isSuccess: Boolean!
  isConfirmed: Boolean!
  user: UserDbObject
}

type LogoutResponse {
  success: Boolean!
  message: String!
}

type Mutation {
  register(request: RegisterRequestInput!): SignUpResponse!
  login(request: LoginRequestInput!): LoginResponse!
  confirmAccount(confirmationCode: String! email: String!): AccountConfirmationResponse!
  resendVerificationCode(email: String!): ResendConfirmationCodeResponse!
  logout: LogoutResponse!
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Query {
  users("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String order_by: UserDbObjectSort where: UserDbObjectFilter): UsersConnection
  userByAwsCognitoId(id: UUID!): [UserDbObject!]! @authorize
  loggedInUser: UserDbObject @authorize
}

type ResendConfirmationCodeResponse {
  codeDeliveryDetails: CodeDeliveryDetailsType
  responseMetadata: ResponseMetadata
  contentLength: Long!
  httpStatusCode: HttpStatusCode!
}

type ResponseMetadata {
  requestId: String
  metadata: [KeyValuePairOfStringAndString!]
  checksumAlgorithm: CoreChecksumAlgorithm!
  checksumValidationStatus: ChecksumValidationStatus!
}

type SignUpResponse {
  codeDeliveryDetails: CodeDeliveryDetailsType
  userConfirmed: Boolean!
  userSub: String
  responseMetadata: ResponseMetadata
  contentLength: Long!
  httpStatusCode: HttpStatusCode!
}

type UserDbObject {
  staff: [UserDbObject]
  companiesMemberOf: [UserDbObject]
  id: UUID!
  email: String!
  phoneNumber: String!
  name: String!
  companyName: String!
  companyType: String!
  address: String!
  generalInfo: GeneralCompanyInfoDbObject!
  createdDate: DateTime!
  updatedDate: DateTime
  emailVerified: Boolean!
  phoneVerified: Boolean!
}

"A connection to a list of items."
type UsersConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [UsersEdge!]
  "A flattened list of the nodes."
  nodes: [UserDbObject!]
}

"An edge in a connection."
type UsersEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: UserDbObject!
}

input GeneralCompanyInfoDbObjectFilter {
  AND: [GeneralCompanyInfoDbObjectFilter!]
  OR: [GeneralCompanyInfoDbObjectFilter!]
  marketingPreference: String
  marketingPreference_not: String
  marketingPreference_contains: String
  marketingPreference_not_contains: String
  marketingPreference_starts_with: String
  marketingPreference_not_starts_with: String
  marketingPreference_ends_with: String
  marketingPreference_not_ends_with: String
  marketingPreference_in: [String!]
  marketingPreference_not_in: [String!]
  annualRevenue: String
  annualRevenue_not: String
  annualRevenue_contains: String
  annualRevenue_not_contains: String
  annualRevenue_starts_with: String
  annualRevenue_not_starts_with: String
  annualRevenue_ends_with: String
  annualRevenue_not_ends_with: String
  annualRevenue_in: [String!]
  annualRevenue_not_in: [String!]
  companyPriority: String
  companyPriority_not: String
  companyPriority_contains: String
  companyPriority_not_contains: String
  companyPriority_starts_with: String
  companyPriority_not_starts_with: String
  companyPriority_ends_with: String
  companyPriority_not_ends_with: String
  companyPriority_in: [String!]
  companyPriority_not_in: [String!]
  companySize: String
  companySize_not: String
  companySize_contains: String
  companySize_not_contains: String
  companySize_starts_with: String
  companySize_not_starts_with: String
  companySize_ends_with: String
  companySize_not_ends_with: String
  companySize_in: [String!]
  companySize_not_in: [String!]
}

input GeneralCompanyInfoDbObjectSort {
  marketingPreference: SortOperationKind
  annualRevenue: SortOperationKind
  companyPriority: SortOperationKind
  companySize: SortOperationKind
}

input ISingleFilterOfGuidFilter {
  AND: [ISingleFilterOfGuidFilter!]
  OR: [ISingleFilterOfGuidFilter!]
  element: UUID
  element_not: UUID
  element_in: [UUID!]
  element_not_in: [UUID!]
  element_gt: UUID
  element_not_gt: UUID
  element_gte: UUID
  element_not_gte: UUID
  element_lt: UUID
  element_not_lt: UUID
  element_lte: UUID
  element_not_lte: UUID
}

input LoginRequestInput {
  username: String!
  password: String!
}

input RegisterRequestInput {
  email: String!
  password: String!
  name: String!
  phoneNumber: String!
  address: String!
  companyName: String!
  companyPriority: String!
  companySize: String!
  companyType: String!
  marketingPreference: String!
  annualRevenue: String!
}

input UserDbObjectFilter {
  AND: [UserDbObjectFilter!]
  OR: [UserDbObjectFilter!]
  id: UUID
  id_not: UUID
  id_in: [UUID!]
  id_not_in: [UUID!]
  id_gt: UUID
  id_not_gt: UUID
  id_gte: UUID
  id_not_gte: UUID
  id_lt: UUID
  id_not_lt: UUID
  id_lte: UUID
  id_not_lte: UUID
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_in: [String!]
  email_not_in: [String!]
  phoneNumber: String
  phoneNumber_not: String
  phoneNumber_contains: String
  phoneNumber_not_contains: String
  phoneNumber_starts_with: String
  phoneNumber_not_starts_with: String
  phoneNumber_ends_with: String
  phoneNumber_not_ends_with: String
  phoneNumber_in: [String!]
  phoneNumber_not_in: [String!]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_in: [String!]
  name_not_in: [String!]
  companyName: String
  companyName_not: String
  companyName_contains: String
  companyName_not_contains: String
  companyName_starts_with: String
  companyName_not_starts_with: String
  companyName_ends_with: String
  companyName_not_ends_with: String
  companyName_in: [String!]
  companyName_not_in: [String!]
  companyType: String
  companyType_not: String
  companyType_contains: String
  companyType_not_contains: String
  companyType_starts_with: String
  companyType_not_starts_with: String
  companyType_ends_with: String
  companyType_not_ends_with: String
  companyType_in: [String!]
  companyType_not_in: [String!]
  address: String
  address_not: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  address_in: [String!]
  address_not_in: [String!]
  generalInfo: GeneralCompanyInfoDbObjectFilter
  staff_some: ISingleFilterOfGuidFilter
  staff_none: ISingleFilterOfGuidFilter
  staff_all: ISingleFilterOfGuidFilter
  staff_any: Boolean
  companiesMemberOf_some: ISingleFilterOfGuidFilter
  companiesMemberOf_none: ISingleFilterOfGuidFilter
  companiesMemberOf_all: ISingleFilterOfGuidFilter
  companiesMemberOf_any: Boolean
  createdDate: DateTime
  createdDate_not: DateTime
  createdDate_in: [DateTime!]
  createdDate_not_in: [DateTime!]
  createdDate_gt: DateTime
  createdDate_not_gt: DateTime
  createdDate_gte: DateTime
  createdDate_not_gte: DateTime
  createdDate_lt: DateTime
  createdDate_not_lt: DateTime
  createdDate_lte: DateTime
  createdDate_not_lte: DateTime
  updatedDate: DateTime
  updatedDate_not: DateTime
  updatedDate_in: [DateTime]
  updatedDate_not_in: [DateTime]
  updatedDate_gt: DateTime
  updatedDate_not_gt: DateTime
  updatedDate_gte: DateTime
  updatedDate_not_gte: DateTime
  updatedDate_lt: DateTime
  updatedDate_not_lt: DateTime
  updatedDate_lte: DateTime
  updatedDate_not_lte: DateTime
  emailVerified: Boolean
  emailVerified_not: Boolean
  phoneVerified: Boolean
  phoneVerified_not: Boolean
}

input UserDbObjectSort {
  id: SortOperationKind
  email: SortOperationKind
  phoneNumber: SortOperationKind
  name: SortOperationKind
  companyName: SortOperationKind
  companyType: SortOperationKind
  address: SortOperationKind
  generalInfo: GeneralCompanyInfoDbObjectSort
  createdDate: SortOperationKind
  updatedDate: SortOperationKind
  emailVerified: SortOperationKind
  phoneVerified: SortOperationKind
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
  VALIDATION
}

enum ChecksumValidationStatus {
  NOT_VALIDATED
  PENDING_RESPONSE_READ
  SUCCESSFUL
  INVALID
}

enum CoreChecksumAlgorithm {
  NONE
  CRC32C
  CRC32
  SHA256
  SHA1
}

enum HttpStatusCode {
  CONTINUE
  SWITCHING_PROTOCOLS
  PROCESSING
  EARLY_HINTS
  OK
  CREATED
  ACCEPTED
  NON_AUTHORITATIVE_INFORMATION
  NO_CONTENT
  RESET_CONTENT
  PARTIAL_CONTENT
  MULTI_STATUS
  ALREADY_REPORTED
  IM_USED
  MULTIPLE_CHOICES
  MOVED_PERMANENTLY
  FOUND
  SEE_OTHER
  NOT_MODIFIED
  USE_PROXY
  UNUSED
  REDIRECT_KEEP_VERB
  PERMANENT_REDIRECT
  BAD_REQUEST
  UNAUTHORIZED
  PAYMENT_REQUIRED
  FORBIDDEN
  NOT_FOUND
  METHOD_NOT_ALLOWED
  NOT_ACCEPTABLE
  PROXY_AUTHENTICATION_REQUIRED
  REQUEST_TIMEOUT
  CONFLICT
  GONE
  LENGTH_REQUIRED
  PRECONDITION_FAILED
  REQUEST_ENTITY_TOO_LARGE
  REQUEST_URI_TOO_LONG
  UNSUPPORTED_MEDIA_TYPE
  REQUESTED_RANGE_NOT_SATISFIABLE
  EXPECTATION_FAILED
  MISDIRECTED_REQUEST
  UNPROCESSABLE_ENTITY
  LOCKED
  FAILED_DEPENDENCY
  UPGRADE_REQUIRED
  PRECONDITION_REQUIRED
  TOO_MANY_REQUESTS
  REQUEST_HEADER_FIELDS_TOO_LARGE
  UNAVAILABLE_FOR_LEGAL_REASONS
  INTERNAL_SERVER_ERROR
  NOT_IMPLEMENTED
  BAD_GATEWAY
  SERVICE_UNAVAILABLE
  GATEWAY_TIMEOUT
  HTTP_VERSION_NOT_SUPPORTED
  VARIANT_ALSO_NEGOTIATES
  INSUFFICIENT_STORAGE
  LOOP_DETECTED
  NOT_EXTENDED
  NETWORK_AUTHENTICATION_REQUIRED
}

enum SortOperationKind {
  ASC
  DESC
}

directive @authorize("The name of the authorization policy that determines access to the annotated resource." policy: String "Roles that are allowed to access the annotated resource." roles: [String!] "Defines when when the authorize directive shall be applied.By default the authorize directives are applied during the validation phase." apply: ApplyPolicy! = BEFORE_RESOLVER) repeatable on OBJECT | FIELD_DEFINITION

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")